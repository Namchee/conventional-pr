package formatter

import (
	"errors"
	"testing"

	"github.com/Namchee/conventional-pr/internal/entity"
	"github.com/Namchee/conventional-pr/internal/mocks"
	"github.com/stretchr/testify/assert"
)

func TestFormatResultToTable(t *testing.T) {
	type args struct {
		whitelist  []*entity.WhitelistResult
		validation []*entity.ValidationResult
	}

	tests := []struct {
		name string
		args args
		want string
	}{
		{
			name: "formats whitelisted pull request correctly",
			args: args{
				whitelist: []*entity.WhitelistResult{
					{
						Name:   "foo bar",
						Active: true,
						Result: true,
					},
				},
				validation: []*entity.ValidationResult{},
			},
			want: `## **Pull Request Validation Report**

*This comment is automatically generated by [Conventional PR](https://github.com/Namchee/conventional-pr)*

### **Whitelist Report**

| Whitelist | Active | Result |
| - | :-: | :-: |
| foo bar | ✅ | ✅ |

**Result**

Pull request matches with one (or more) enabled whitelist criteria. Pull request validation is skipped.

Last Modified at 01 Jan 70 01:02 UTC`,
		},
		{
			name: "formats valid pull request correctly",
			args: args{
				whitelist: []*entity.WhitelistResult{
					{
						Name:   "foo bar",
						Active: true,
						Result: false,
					},
				},
				validation: []*entity.ValidationResult{
					{
						Name:   "bar baz",
						Active: true,
						Result: nil,
					},
				},
			},
			want: `## **Pull Request Validation Report**

*This comment is automatically generated by [Conventional PR](https://github.com/Namchee/conventional-pr)*

### **Whitelist Report**

| Whitelist | Active | Result |
| - | :-: | :-: |
| foo bar | ✅ | ❌ |

**Result**

Pull request does not satisfy any enabled whitelist criteria. Pull request will be validated.

### **Validation Report**

| Validation | Active | Result |
| - | :-: | :-: |
| bar baz | ✅ | ✅ |

**Result**

Pull request satisfies all enabled pull request rules.

Last Modified at 01 Jan 70 01:02 UTC`,
		},
		{
			name: "format invalid pull request correctly",
			args: args{
				whitelist: []*entity.WhitelistResult{
					{
						Name:   "foo bar",
						Active: true,
						Result: false,
					},
				},
				validation: []*entity.ValidationResult{
					{
						Name:   "bar baz",
						Active: true,
						Result: errors.New("testing"),
					},
				},
			},
			want: `## **Pull Request Validation Report**

*This comment is automatically generated by [Conventional PR](https://github.com/Namchee/conventional-pr)*

### **Whitelist Report**

| Whitelist | Active | Result |
| - | :-: | :-: |
| foo bar | ✅ | ❌ |

**Result**

Pull request does not satisfy any enabled whitelist criteria. Pull request will be validated.

### **Validation Report**

| Validation | Active | Result |
| - | :-: | :-: |
| bar baz | ✅ | ❌ |

**Result**

Pull request is invalid.

**Reason**

- Testing

Last Modified at 01 Jan 70 01:02 UTC`,
		},
		{
			name: "able to format inactive whitelist and validator",
			args: args{
				whitelist: []*entity.WhitelistResult{
					{
						Name:   "foo bar",
						Active: true,
						Result: false,
					},
					{
						Name:   "abc",
						Active: false,
						Result: false,
					},
				},
				validation: []*entity.ValidationResult{
					{
						Name:   "bar baz",
						Active: true,
						Result: errors.New("testing"),
					},
					{
						Name:   "def",
						Active: false,
						Result: nil,
					},
				},
			},
			want: `## **Pull Request Validation Report**

*This comment is automatically generated by [Conventional PR](https://github.com/Namchee/conventional-pr)*

### **Whitelist Report**

| Whitelist | Active | Result |
| - | :-: | :-: |
| foo bar | ✅ | ❌ |
| abc | ❌ | ❌ |

**Result**

Pull request does not satisfy any enabled whitelist criteria. Pull request will be validated.

### **Validation Report**

| Validation | Active | Result |
| - | :-: | :-: |
| bar baz | ✅ | ❌ |
| def | ❌ | ✅ |

**Result**

Pull request is invalid.

**Reason**

- Testing

Last Modified at 01 Jan 70 01:02 UTC`,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			results := &entity.PullRequestResult{
				Whitelist:  tc.args.whitelist,
				Validation: tc.args.validation,
			}

			got := FormatResultToTables(
				results,
				mocks.ClockMock{}.Now(),
			)

			assert.Equal(t, tc.want, got)
		})
	}
}
